
(* This program is translated from its corresponding murphi version *)

open Core.Std
open Utils
open Paramecium
open Loach
open Formula
open InvFinder
open Cmdline

let _CACHE_I = strc "CACHE_I"
let _CACHE_S = strc "CACHE_S"
let _CACHE_E = strc "CACHE_E"
let _NODE_None = strc "NODE_None"
let _NODE_Get = strc "NODE_Get"
let _NODE_GetX = strc "NODE_GetX"
let _UNI_None = strc "UNI_None"
let _UNI_Get = strc "UNI_Get"
let _UNI_GetX = strc "UNI_GetX"
let _UNI_Put = strc "UNI_Put"
let _UNI_PutX = strc "UNI_PutX"
let _UNI_Nak = strc "UNI_Nak"
let _INV_None = strc "INV_None"
let _INV_Inv = strc "INV_Inv"
let _INV_InvAck = strc "INV_InvAck"
let _RP_None = strc "RP_None"
let _RP_Replace = strc "RP_Replace"
let _WB_None = strc "WB_None"
let _WB_Wb = strc "WB_Wb"
let _SHWB_None = strc "SHWB_None"
let _SHWB_ShWb = strc "SHWB_ShWb"
let _SHWB_FAck = strc "SHWB_FAck"
let _NAKC_None = strc "NAKC_None"
let _NAKC_Nakc = strc "NAKC_Nakc"
let _True = boolc true
let _False = boolc false

let types = [
  enum "CACHE_STATE" [_CACHE_I; _CACHE_S; _CACHE_E];
  enum "NODE_CMD" [_NODE_None; _NODE_Get; _NODE_GetX];
  enum "UNI_CMD" [_UNI_None; _UNI_Get; _UNI_GetX; _UNI_Put; _UNI_PutX; _UNI_Nak];
  enum "INV_CMD" [_INV_None; _INV_Inv; _INV_InvAck];
  enum "RP_CMD" [_RP_None; _RP_Replace];
  enum "WB_CMD" [_WB_None; _WB_Wb];
  enum "SHWB_CMD" [_SHWB_None; _SHWB_ShWb; _SHWB_FAck];
  enum "NAKC_CMD" [_NAKC_None; _NAKC_Nakc];
  enum "NODE" (int_consts [1; 2; 3]);
  enum "DATA" (int_consts [1; 2]);
  enum "boolean" [_True; _False];
]

let _NODE_STATE = List.concat [
  [arrdef [("ProcCmd", [])] "NODE_CMD"];
  [arrdef [("InvMarked", [])] "boolean"];
  [arrdef [("CacheState", [])] "CACHE_STATE"];
  [arrdef [("CacheData", [])] "DATA"]
]

let _DIR_STATE = List.concat [
  [arrdef [("Pending", [])] "boolean"];
  [arrdef [("Local", [])] "boolean"];
  [arrdef [("Dirty", [])] "boolean"];
  [arrdef [("HeadVld", [])] "boolean"];
 [arrdef [("HeadPtr", [])] "NODE"];
  [arrdef [("ShrVld", [])] "boolean"];
  [arrdef [("ShrSet", [])] "boolean"];
  [arrdef [("InvSet", [])] "boolean"]
]

let _UNI_MSG = List.concat [
  [arrdef [("Cmd", [])] "UNI_CMD"];
   [arrdef [("Proc", [])] "NODE"];
  [arrdef [("Data", [])] "DATA"]
]

let _INV_MSG = List.concat [
  [arrdef [("Cmd", [])] "INV_CMD"]
]

let _RP_MSG = List.concat [
  [arrdef [("Cmd", [])] "RP_CMD"]
]

let _WB_MSG = List.concat [
  [arrdef [("Cmd", [])] "WB_CMD"];
    [arrdef [("Proc", [])] "NODE"];
  [arrdef [("Data", [])] "DATA"]
]

let _SHWB_MSG = List.concat [
  [arrdef [("Cmd", [])] "SHWB_CMD"];
   [arrdef [("Proc", [])] "NODE"];
  [arrdef [("Data", [])] "DATA"]
]

let _NAKC_MSG = List.concat [
  [arrdef [("Cmd", [])] "NAKC_CMD"]
]

let _STATE = List.concat [
  record_def "Proc" [paramdef "i2" "NODE"] _NODE_STATE;
  record_def "Dir" [] _DIR_STATE;
  [arrdef [("MemData", [])] "DATA"];
  record_def "UniMsg" [paramdef "i2" "NODE"] _UNI_MSG;
  record_def "InvMsg" [paramdef "i3" "NODE"] _INV_MSG;
  record_def "RpMsg" [paramdef "i4" "NODE"] _RP_MSG;
  record_def "WbMsg" [] _WB_MSG;
  record_def "ShWbMsg" [] _SHWB_MSG;
  record_def "NakcMsg" [] _NAKC_MSG;
  [arrdef [("CurrData", [])] "DATA"];
  [arrdef [("PrevData", [])] "DATA"];
  [arrdef [("LastWrVld", [])] "boolean"];
  [arrdef [("LastWrPtr", [])] "NODE"];
  [arrdef [("PendReqSrc", [])] "NODE"];
  [arrdef [("PendReqCmd", [])] "UNI_CMD"];
  [arrdef [("Collecting", [])] "boolean"];
  [arrdef [("FwdCmd", [])] "UNI_CMD"];
    [arrdef [("FwdSrc", [])] "NODE"];
  [arrdef [("LastInvAck", [])] "NODE"];
  [arrdef [("LastOtherInvAck", [])] "NODE"]
]

let vardefs = List.concat [
  [arrdef [("Home", [])] "NODE"];
  record_def "Sta" [] _STATE
]


let init = (parallel [(assign (global "Home") (param (paramfix "h" "NODE" (intc 1)))); (assign (record [global "Sta"; global "MemData"]) (param (paramfix "d" "DATA" (intc 1)))); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "WbMsg"; global "Cmd"]) (const _WB_None)); (assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_None)); (assign (record [global "Sta"; global "NakcMsg"; global "Cmd"]) (const _NAKC_None)); (forStatement (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "p"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; arr [("RpMsg", [paramref "p"])]; global "Cmd"]) (const _RP_None))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "CurrData"]) (param (paramfix "d" "DATA" (intc 1)))); (assign (record [global "Sta"; global "PrevData"]) (param (paramfix "d" "DATA" (intc 1)))); (assign (record [global "Sta"; global "LastWrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None))])

let n_NI_Replace1 =
  let name = "n_NI_Replace1" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)); (eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"]) (const _RP_None)); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "src"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Replace2 =
  let name = "n_NI_Replace2" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)); (eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _False))]) in
  let statement = (assign (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"]) (const _RP_None)) in
  rule name params formula statement

let n_NI_InvAck_no_exists7 =
  let name = "n_NI_InvAck_no_exists7" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"])) (const _INV_InvAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "Home"])]])) (const (boolc false)))]); (forallFormula [paramdef "p" "NODE"] (orList [(eqn (param (paramref "p")) (param (paramref "src"))); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]])) (const (boolc false)))]))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false))); (assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_InvAck_no_exists8 =
  let name = "n_NI_InvAck_no_exists8" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"])) (const _INV_InvAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "Home"])]])) (const (boolc false)))]); (forallFormula [paramdef "p" "NODE"] (orList [(eqn (param (paramref "p")) (param (paramref "src"))); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]])) (const (boolc false)))]))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false))); (assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_InvAck_no_exists9 =
  let name = "n_NI_InvAck_no_exists9" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"])) (const _INV_InvAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "Home"])]])) (const (boolc false)))]); (forallFormula [paramdef "p" "NODE"] (orList [(eqn (param (paramref "p")) (param (paramref "src"))); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]])) (const (boolc false)))]))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false))); (assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_InvAck_exists10 =
  let name = "n_NI_InvAck_exists10" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"])) (const _INV_InvAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]])) (const (boolc true)))]); (neg (eqn (param (paramref "dst")) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "dst"])]])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src"))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_InvAck_exists_Home11 =
  let name = "n_NI_InvAck_exists_Home11" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"])) (const _INV_InvAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "Home"])]])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "src"])]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src"))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "src"])]]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Inv12 =
  let name = "n_NI_Inv12" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "dst"])]; global "Cmd"])) (const _INV_Inv))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"])) (const _NODE_Get))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "dst"])]; global "Cmd"]) (const _INV_InvAck)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "InvMarked"]) (const (boolc true)))]) in
  rule name params formula statement

let n_NI_Inv13 =
  let name = "n_NI_Inv13" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("InvMsg", [paramref "dst"])]; global "Cmd"])) (const _INV_Inv))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"])) (const _NODE_Get)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("InvMsg", [paramref "dst"])]; global "Cmd"]) (const _INV_InvAck)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_NI_Remote_PutX14 =
  let name = "n_NI_Remote_PutX14" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"])) (const _UNI_PutX))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"])) (const _NODE_GetX))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]) (var (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Data"])))]) in
  rule name params formula statement

let n_NI_Remote_Put16 =
  let name = "n_NI_Remote_Put16" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"])) (const _UNI_Put))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "InvMarked"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_NI_Remote_Put17 =
  let name = "n_NI_Remote_Put17" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"])) (const _UNI_Put))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "InvMarked"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]) (var (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Data"])))]) in
  rule name params formula statement

let n_NI_Remote_GetX_PutX20 =
  let name = "n_NI_Remote_GetX_PutX20" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (param (paramref "dst")))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E))]); (neg (eqn (param (paramref "src")) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]))); (assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_FAck)); (assign (record [global "Sta"; global "ShWbMsg"; global "Proc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Remote_GetX_PutX21 =
  let name = "n_NI_Remote_GetX_PutX21" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (param (paramref "dst")))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (param (paramref "src")) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Remote_GetX_Nak22 =
  let name = "n_NI_Remote_GetX_Nak22" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (param (paramref "dst")))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; global "NakcMsg"; global "Cmd"]) (const _NAKC_Nakc)); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX23 =
  let name = "n_NI_Local_GetX_PutX23" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX24 =
  let name = "n_NI_Local_GetX_PutX24" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX25 =
  let name = "n_NI_Local_GetX_PutX25" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX26 =
  let name = "n_NI_Local_GetX_PutX26" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]); (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX27 =
  let name = "n_NI_Local_GetX_PutX27" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX28 =
  let name = "n_NI_Local_GetX_PutX28" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]); (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX29 =
  let name = "n_NI_Local_GetX_PutX29" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX30 =
  let name = "n_NI_Local_GetX_PutX30" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]); (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX31 =
  let name = "n_NI_Local_GetX_PutX31" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX32 =
  let name = "n_NI_Local_GetX_PutX32" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]); (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX33 =
  let name = "n_NI_Local_GetX_PutX33" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX34 =
  let name = "n_NI_Local_GetX_PutX34" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]); (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX35 =
  let name = "n_NI_Local_GetX_PutX35" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX36 =
  let name = "n_NI_Local_GetX_PutX36" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]); (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX37 =
  let name = "n_NI_Local_GetX_PutX37" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX38 =
  let name = "n_NI_Local_GetX_PutX38" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX39 =
  let name = "n_NI_Local_GetX_PutX39" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX40 =
  let name = "n_NI_Local_GetX_PutX40" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX41 =
  let name = "n_NI_Local_GetX_PutX41" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX42 =
  let name = "n_NI_Local_GetX_PutX42" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX43 =
  let name = "n_NI_Local_GetX_PutX43" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX44 =
  let name = "n_NI_Local_GetX_PutX44" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX45 =
  let name = "n_NI_Local_GetX_PutX45" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX46 =
  let name = "n_NI_Local_GetX_PutX46" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX47 =
  let name = "n_NI_Local_GetX_PutX47" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX48 =
  let name = "n_NI_Local_GetX_PutX48" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX49 =
  let name = "n_NI_Local_GetX_PutX49" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX50 =
  let name = "n_NI_Local_GetX_PutX50" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX51 =
  let name = "n_NI_Local_GetX_PutX51" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX52 =
  let name = "n_NI_Local_GetX_PutX52" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_Get)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX53 =
  let name = "n_NI_Local_GetX_PutX53" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX54 =
  let name = "n_NI_Local_GetX_PutX54" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX55 =
  let name = "n_NI_Local_GetX_PutX55" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX56 =
  let name = "n_NI_Local_GetX_PutX56" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX57 =
  let name = "n_NI_Local_GetX_PutX57" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX58 =
  let name = "n_NI_Local_GetX_PutX58" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX59 =
  let name = "n_NI_Local_GetX_PutX59" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_PutX60 =
  let name = "n_NI_Local_GetX_PutX60" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]); (neg (forallFormula [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _False)))))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_GetX_GetX61 =
  let name = "n_NI_Local_GetX_GetX61" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const (boolc false)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_GetX62 =
  let name = "n_NI_Local_GetX_GetX62" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const (boolc false)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_GetX_Nak63 =
  let name = "n_NI_Local_GetX_Nak63" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_NI_Local_GetX_Nak64 =
  let name = "n_NI_Local_GetX_Nak64" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_NI_Local_GetX_Nak65 =
  let name = "n_NI_Local_GetX_Nak65" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_NI_Remote_Get_Put66 =
  let name = "n_NI_Remote_Get_Put66" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (param (paramref "dst")))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E))]); (neg (eqn (param (paramref "src")) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]))); (assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_ShWb)); (assign (record [global "Sta"; global "ShWbMsg"; global "Proc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "ShWbMsg"; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Remote_Get_Put67 =
  let name = "n_NI_Remote_Get_Put67" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (param (paramref "dst")))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (param (paramref "src")) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Remote_Get_Nak68 =
  let name = "n_NI_Remote_Get_Nak68" in
  let params = [paramdef "dst" "NODE"; paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (param (paramref "dst")))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; global "NakcMsg"; global "Cmd"]) (const _NAKC_Nakc)); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_Local_Get_Put69 =
  let name = "n_NI_Local_Get_Put69" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"])))]) in
  rule name params formula statement

let n_NI_Local_Get_Put70 =
  let name = "n_NI_Local_Get_Put70" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"])))]) in
  rule name params formula statement

let n_NI_Local_Get_Put71 =
  let name = "n_NI_Local_Get_Put71" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true))))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "src"])]]) (const (boolc true))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (var (record [global "(p = src |
    Sta"; global "Dir"; arr [("ShrSet", [paramref "p])"])]]))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_NI_Local_Get_Put72 =
  let name = "n_NI_Local_Get_Put72" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true))))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "src"])]]) (const (boolc true))); (forStatement (assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (var (record [global "(p = src |
    Sta"; global "Dir"; arr [("ShrSet", [paramref "p])"])]]))) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_NI_Local_Get_Put73 =
  let name = "n_NI_Local_Get_Put73" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true))))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const (boolc true))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_NI_Local_Get_Put74 =
  let name = "n_NI_Local_Get_Put74" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true))))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const (boolc true))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Data"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_NI_Local_Get_Get75 =
  let name = "n_NI_Local_Get_Get75" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const (boolc false)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_Get)); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_Get)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_Get_Get76 =
  let name = "n_NI_Local_Get_Get76" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const (boolc false)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "PendReqSrc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_Get)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Local_Get_Nak77 =
  let name = "n_NI_Local_Get_Nak77" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_NI_Local_Get_Nak78 =
  let name = "n_NI_Local_Get_Nak78" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const (boolc true)))]); (neg (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_NI_Local_Get_Nak79 =
  let name = "n_NI_Local_Get_Nak79" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_NI_Nak81 =
  let name = "n_NI_Nak81" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"])) (const _UNI_Nak)) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "dst"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "InvMarked"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Remote_Replace83 =
  let name = "n_PI_Remote_Replace83" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "CacheState"])) (const _CACHE_S))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr [("RpMsg", [paramref "src"])]; global "Cmd"]) (const _RP_Replace))]) in
  rule name params formula statement

let n_PI_Remote_PutX86 =
  let name = "n_PI_Remote_PutX86" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"])) (const _CACHE_E))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "WbMsg"; global "Cmd"]) (const _WB_Wb)); (assign (record [global "Sta"; global "WbMsg"; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; global "WbMsg"; global "Data"]) (var (record [global "Sta"; arr [("Proc", [paramref "dst"])]; global "CacheData"])))]) in
  rule name params formula statement

let n_PI_Remote_GetX95 =
  let name = "n_PI_Remote_GetX95" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "CacheState"])) (const _CACHE_I))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "ProcCmd"]) (const _NODE_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_PI_Remote_Get100 =
  let name = "n_PI_Remote_Get100" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "CacheState"])) (const _CACHE_I))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "ProcCmd"]) (const _NODE_Get)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "src"])]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement

let n_Store101 =
  let name = "n_Store101" in
  let params = [paramdef "data" "DATA"; paramdef "src" "NODE"] in
  let formula = (eqn (var (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "CacheState"])) (const _CACHE_E)) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "src"])]; global "CacheData"]) (param (paramref "data"))); (assign (record [global "Sta"; global "CurrData"]) (param (paramref "data"))); (assign (record [global "Sta"; global "LastWrVld"]) (const (boolc true))); (assign (record [global "Sta"; global "LastWrPtr"]) (param (paramref "src")))]) in
  rule name params formula statement

let n_NI_ShWb3 =
  let name = "n_NI_ShWb3" in
  let params = [] in
  let formula = (eqn (var (record [global "Sta"; global "ShWbMsg"; global "Cmd"])) (const _SHWB_ShWb)) in
  let statement = (parallel [(assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc true))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (var (record [global "(p = Sta"; global "ShWbMsg"; global "Proc |
    Sta"; global "Dir"; arr [("ShrSet", [paramref "p])"])]]))); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (var (record [global "(p = Sta"; global "ShWbMsg"; global "Proc |
    Sta"; global "Dir"; arr [("ShrSet", [paramref "p])"])]])))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; global "ShWbMsg"; global "Data"])))]) in
  rule name params formula statement

let n_NI_FAck4 =
  let name = "n_NI_FAck4" in
  let params = [] in
  let formula = (andList [(eqn (var (record [global "Sta"; global "ShWbMsg"; global "Cmd"])) (const _SHWB_FAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (var (record [global "Sta"; global "ShWbMsg"; global "Proc"])))]) in
  rule name params formula statement

let n_NI_FAck5 =
  let name = "n_NI_FAck5" in
  let params = [] in
  let formula = (andList [(eqn (var (record [global "Sta"; global "ShWbMsg"; global "Cmd"])) (const _SHWB_FAck)); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false)))]) in
  rule name params formula statement

let n_NI_Wb6 =
  let name = "n_NI_Wb6" in
  let params = [] in
  let formula = (eqn (var (record [global "Sta"; global "WbMsg"; global "Cmd"])) (const _WB_Wb)) in
  let statement = (parallel [(assign (record [global "Sta"; global "WbMsg"; global "Cmd"]) (const _WB_None)); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc false))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; global "WbMsg"; global "Data"])))]) in
  rule name params formula statement

let n_NI_Local_PutXAcksDone15 =
  let name = "n_NI_Local_PutXAcksDone15" in
  let params = [] in
  let formula = (eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"])) (const _UNI_PutX)) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Data"])))]) in
  rule name params formula statement

let n_NI_Local_Put18 =
  let name = "n_NI_Local_Put18" in
  let params = [] in
  let formula = (andList [(eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"])) (const _UNI_Put)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Data"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_NI_Local_Put19 =
  let name = "n_NI_Local_Put19" in
  let params = [] in
  let formula = (andList [(eqn (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"])) (const _UNI_Put)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Data"]))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Data"])))]) in
  rule name params formula statement

let n_NI_Nak_Clear80 =
  let name = "n_NI_Nak_Clear80" in
  let params = [] in
  let formula = (eqn (var (record [global "Sta"; global "NakcMsg"; global "Cmd"])) (const _NAKC_Nakc)) in
  let statement = (parallel [(assign (record [global "Sta"; global "NakcMsg"; global "Cmd"]) (const _NAKC_None)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Local_Replace82 =
  let name = "n_PI_Local_Replace82" in
  let params = [] in
  let formula = (andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_S))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_PI_Local_PutX84 =
  let name = "n_PI_Local_PutX84" in
  let params = [] in
  let formula = (andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"])))]) in
  rule name params formula statement

let n_PI_Local_PutX85 =
  let name = "n_PI_Local_PutX85" in
  let params = [] in
  let formula = (andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_E))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc true))))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"])))]) in
  rule name params formula statement

let n_PI_Local_GetX_PutX87 =
  let name = "n_PI_Local_GetX_PutX87" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (parallel [(ifelseStatement (andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_PI_Local_GetX_PutX88 =
  let name = "n_PI_Local_GetX_PutX88" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_S))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (forStatement (parallel [(ifelseStatement (andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc true))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr [("InvSet", [paramref "p"])]]) (const (boolc false))); (assign (record [global "Sta"; arr [("InvMsg", [paramref "p"])]; global "Cmd"]) (const _INV_None))])); (assign (record [global "Sta"; global "Dir"; arr [("ShrSet", [paramref "p"])]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_PI_Local_GetX_PutX89 =
  let name = "n_PI_Local_GetX_PutX89" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_PI_Local_GetX_PutX90 =
  let name = "n_PI_Local_GetX_PutX90" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_S))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_PI_Local_GetX_GetX91 =
  let name = "n_PI_Local_GetX_GetX91" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_GetX)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "PendReqSrc"]) (var (global "Home"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Local_GetX_GetX92 =
  let name = "n_PI_Local_GetX_GetX92" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_S))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_GetX)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "PendReqSrc"]) (var (global "Home"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Local_GetX_GetX93 =
  let name = "n_PI_Local_GetX_GetX93" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_GetX)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "PendReqSrc"]) (var (global "Home"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Local_GetX_GetX94 =
  let name = "n_PI_Local_GetX_GetX94" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_S))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_GetX)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "PendReqSrc"]) (var (global "Home"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Local_Get_Put96 =
  let name = "n_PI_Local_Get_Put96" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_I))]) in
  rule name params formula statement

let n_PI_Local_Get_Put97 =
  let name = "n_PI_Local_Get_Put97" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "InvMarked"])) (const _False))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc true))); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheData"]) (var (record [global "Sta"; global "MemData"])))]) in
  rule name params formula statement

let n_PI_Local_Get_Get98 =
  let name = "n_PI_Local_Get_Get98" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_Get)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_Get)); (assign (record [global "Sta"; global "PendReqSrc"]) (var (global "Home"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_Get)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let n_PI_Local_Get_Get99 =
  let name = "n_PI_Local_Get_Get99" in
  let params = [] in
  let formula = (andList [(andList [(andList [(andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"])) (const _NODE_None)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "CacheState"])) (const _CACHE_I))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const (boolc false)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const (boolc true)))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr [("Proc", [paramref "Home"])]; global "ProcCmd"]) (const _NODE_Get)); (assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr [("UniMsg", [paramref "Home"])]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (assign (record [global "Sta"; global "PendReqSrc"]) (var (global "Home"))); (assign (record [global "Sta"; global "PendReqCmd"]) (const _UNI_Get)); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement

let rules = [n_NI_Replace1; n_NI_Replace2; n_NI_InvAck_no_exists7; n_NI_InvAck_no_exists8; n_NI_InvAck_no_exists9; n_NI_InvAck_exists10; n_NI_InvAck_exists_Home11; n_NI_Inv12; n_NI_Inv13; n_NI_Remote_PutX14; n_NI_Remote_Put16; n_NI_Remote_Put17; n_NI_Remote_GetX_PutX20; n_NI_Remote_GetX_PutX21; n_NI_Remote_GetX_Nak22; n_NI_Local_GetX_PutX23; n_NI_Local_GetX_PutX24; n_NI_Local_GetX_PutX25; n_NI_Local_GetX_PutX26; n_NI_Local_GetX_PutX27; n_NI_Local_GetX_PutX28; n_NI_Local_GetX_PutX29; n_NI_Local_GetX_PutX30; n_NI_Local_GetX_PutX31; n_NI_Local_GetX_PutX32; n_NI_Local_GetX_PutX33; n_NI_Local_GetX_PutX34; n_NI_Local_GetX_PutX35; n_NI_Local_GetX_PutX36; n_NI_Local_GetX_PutX37; n_NI_Local_GetX_PutX38; n_NI_Local_GetX_PutX39; n_NI_Local_GetX_PutX40; n_NI_Local_GetX_PutX41; n_NI_Local_GetX_PutX42; n_NI_Local_GetX_PutX43; n_NI_Local_GetX_PutX44; n_NI_Local_GetX_PutX45; n_NI_Local_GetX_PutX46; n_NI_Local_GetX_PutX47; n_NI_Local_GetX_PutX48; n_NI_Local_GetX_PutX49; n_NI_Local_GetX_PutX50; n_NI_Local_GetX_PutX51; n_NI_Local_GetX_PutX52; n_NI_Local_GetX_PutX53; n_NI_Local_GetX_PutX54; n_NI_Local_GetX_PutX55; n_NI_Local_GetX_PutX56; n_NI_Local_GetX_PutX57; n_NI_Local_GetX_PutX58; n_NI_Local_GetX_PutX59; n_NI_Local_GetX_PutX60; n_NI_Local_GetX_GetX61; n_NI_Local_GetX_GetX62; n_NI_Local_GetX_Nak63; n_NI_Local_GetX_Nak64; n_NI_Local_GetX_Nak65; n_NI_Remote_Get_Put66; n_NI_Remote_Get_Put67; n_NI_Remote_Get_Nak68; n_NI_Local_Get_Put69; n_NI_Local_Get_Put70; n_NI_Local_Get_Put71; n_NI_Local_Get_Put72; n_NI_Local_Get_Put73; n_NI_Local_Get_Put74; n_NI_Local_Get_Get75; n_NI_Local_Get_Get76; n_NI_Local_Get_Nak77; n_NI_Local_Get_Nak78; n_NI_Local_Get_Nak79; n_NI_Nak81; n_PI_Remote_Replace83; n_PI_Remote_PutX86; n_PI_Remote_GetX95; n_PI_Remote_Get100; n_Store101; n_NI_ShWb3; n_NI_FAck4; n_NI_FAck5; n_NI_Wb6; n_NI_Local_PutXAcksDone15; n_NI_Local_Put18; n_NI_Local_Put19; n_NI_Nak_Clear80; n_PI_Local_Replace82; n_PI_Local_PutX84; n_PI_Local_PutX85; n_PI_Local_GetX_PutX87; n_PI_Local_GetX_PutX88; n_PI_Local_GetX_PutX89; n_PI_Local_GetX_PutX90; n_PI_Local_GetX_GetX91; n_PI_Local_GetX_GetX92; n_PI_Local_GetX_GetX93; n_PI_Local_GetX_GetX94; n_PI_Local_Get_Put96; n_PI_Local_Get_Put97; n_PI_Local_Get_Get98; n_PI_Local_Get_Get99]

let n_CacheStateProp =
  let name = "n_CacheStateProp" in
  let params = [] in
  let formula = (forallFormula [paramdef "p" "NODE"] (forallFormula [paramdef "q" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "q")))) (neg (andList [(eqn (var (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheState"])) (const _CACHE_E)); (eqn (var (record [global "Sta"; arr [("Proc", [paramref "q"])]; global "CacheState"])) (const _CACHE_E))]))))) in
  prop name params formula

let n_CacheDataProp =
  let name = "n_CacheDataProp" in
  let params = [] in
  let formula = (forallFormula [paramdef "p" "NODE"] (andList [(imply (eqn (var (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheState"])) (const _CACHE_E)) (eqn (var (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheData"])) (var (record [global "Sta"; global "CurrData"])))); (imply (eqn (var (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheState"])) (const _CACHE_S)) (andList [(imply (eqn (var (record [global "Sta"; global "Collecting"])) (const _True)) (eqn (var (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheData"])) (var (record [global "Sta"; global "PrevData"])))); (imply (eqn (var (record [global "Sta"; global "Collecting"])) (const _False)) (eqn (var (record [global "Sta"; arr [("Proc", [paramref "p"])]; global "CacheData"])) (var (record [global "Sta"; global "CurrData"]))))]))])) in
  prop name params formula

let n_MemDataProp =
  let name = "n_MemDataProp" in
  let params = [] in
  let formula = (imply (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False)) (eqn (var (record [global "Sta"; global "MemData"])) (var (record [global "Sta"; global "CurrData"])))) in
  prop name params formula

let properties = [n_CacheStateProp; n_CacheDataProp; n_MemDataProp]

let protocol = {
  name = "n_flashChou_without_nxtn";
  types;
  vardefs;
  init;
  rules;
  properties;
}



let propertiesRef=ref [] 

  let preProcessProp p =
  let Prop(name,params,formula)=p in
 (* let ()=print_endline name in
  let ()=print_endline ("this is"^(ToStr.Debug.form_act  (Loach.Trans.trans_formula types formula))) in*)
  match formula with 
  
  |Imply(a,b) ->
    if (List.length params) =2
    then [Prop(name,params,b)]
    else [p]
  |_ ->[p]
    
(*let properties  =List.concat (List.map ~f:(preProcessProp) properties)*)
open LoachGeneralize
open CheckInv
let () =  
  let localhost="192.168.1.37" in
  let a=CheckInv.startServer ~murphi:(In_channel.read_all "flash1130.m")
    ~smv:(In_channel.read_all "mutualEx.smv") "flash0"  "flash0" 
    localhost localhost  ~types:types ~vardefs:vardefs in  
  let ()=Generalize.zero_special:=true in
  let ()=PublicVariables.enumStrings := PublicVariables.extract types in 
  let ()=propertiesRef:=TestParser.loop "flash_with_data.invs" () in
  let properties=List.concat (List.map ~f:(preProcessProp) (!propertiesRef)) in
  let paraRef= paramfix "i" "NODE" (Intc(4)) in
  let dparaDef=paramdef "data" "DATA"  in
  let pair=("n_Store_Home101",[dparaDef]) in
  let pair1=("n_Store101",[dparaDef]) in
  let results=Cmp.cmpOnPrs properties ~types:types  paraRef  [1;2;3] ~unAbstractedReqs:[pair;pair1] rules in
  let ()=print_endline "----------------------/n" in
  let rs'=List.map ~f:(simplify_rule_by_elim_false_eq 4 [var  (global "Home")]) (fst results) in
  (*let rs'=fst results in *)
  let rs'=   List.map ~f:(LoachGeneralize.rule_act ~rename:false ~generalizedtParas:[intc 3] ) rs' in
  let a=List.map ~f:(fun  r -> print_endline (ToMurphi.rule_act r)) rs' in
  let invs= List.map ~f:(fun f ->LoachGeneralize.form_act ~rename:false ~generalizedtParas:[ ] f [] []) (snd results)   in
  let b=List.map ~f:(fun  (_,_,f) -> print_endline (ToMurphi.form_act f)) invs in
  ()
